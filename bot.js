/**************************************************
 * bot.js ‚Äî –§–∞–π–ª —Å PostgreSQL, Express-—Å–µ—Ä–≤–µ—Ä–æ–º –∏ Telegram-–±–æ—Ç–æ–º
 **************************************************/

const express = require('express')
const { Telegraf, Markup } = require('telegraf')
const axios = require('axios')
const path = require('path')
const dotenv = require('dotenv')
const LocalSession = require('telegraf-session-local')
const morgan = require('morgan')
const cron = require('node-cron')
const { Pool } = require('pg') // –ü–æ–¥–∫–ª—é—á–∞–µ–º PostgreSQL

dotenv.config()

// ***********************
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–£–õ–ê PostgreSQL
// ***********************
const pool = new Pool({
	connectionString: process.env.DATABASE_URL,
	ssl:
		process.env.NODE_ENV === 'production'
			? { rejectUnauthorized: false }
			: false,
})

pool
	.connect()
	.then(client => {
		console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
		client.release()
	})
	.catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err))

// ***********************
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
// ***********************
const createTables = async () => {
	try {
		await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        chat_id TEXT PRIMARY KEY,
        name TEXT,
        phone TEXT,
        language TEXT,
        last_activity TIMESTAMP
      )
    `)
		await pool.query(`
      CREATE TABLE IF NOT EXISTS orders (
        id SERIAL PRIMARY KEY,
        merchant_trans_id TEXT,
        chat_id TEXT,
        totalAmount INTEGER,
        status TEXT,
        lang TEXT,
        cart JSONB,
        wc_order_id INTEGER,
        wc_order_key TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `)
		await pool.query(`
      CREATE TABLE IF NOT EXISTS carts (
        chat_id TEXT PRIMARY KEY,
        cart JSONB
      )
    `)
		console.log('–¢–∞–±–ª–∏—Ü—ã PostgreSQL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.')
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', err)
	}
}
createTables()

// ***********************
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
// ***********************
async function getUser(chatId) {
	try {
		const result = await pool.query('SELECT * FROM users WHERE chat_id = $1', [
			chatId,
		])
		return result.rows[0] || null
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err)
		return null
	}
}

async function updateLastActivity(chatId) {
	try {
		await pool.query(
			'UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE chat_id = $1',
			[chatId]
		)
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_activity:', err)
	}
}

// ***********************
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø EXPRESS-–°–ï–†–í–ï–†–ê
// ***********************
const app = express()
const PORT = process.env.PORT || 3000
app.use(morgan('dev'))
app.use(express.json())
app.use(express.static(path.join(__dirname, 'public')))

// ***********************
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM-–ë–û–¢–ê
// ***********************
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN)
const localSession = new LocalSession({ database: 'session_db.json' })
bot.use(localSession.middleware())

// ***********************
// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_activity
// ***********************
bot.use(async (ctx, next) => {
	if (ctx.from && ctx.from.id) {
		const user = await getUser(ctx.from.id)
		if (user) {
			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Å—Å–∏–µ–π
			ctx.session.name = user.name
			ctx.session.contact = user.phone
			ctx.session.language = user.language
			await updateLastActivity(ctx.from.id)
		} else {
			// –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é (—á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ)
			ctx.session = {}
		}
	}
	return next()
})

// ***********************
// 1) –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Billz (–ø–æ–ª—É—á–µ–Ω–∏–µ JWT, —Ç–æ–≤–∞—Ä–æ–≤, –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
// ***********************
async function getJwtToken() {
	try {
		const resp = await axios.post(
			process.env.BILLZ_AUTH_URL,
			{ secret_token: process.env.BILLZ_SECRET_TOKEN },
			{
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
			}
		)
		if (resp.status === 200) {
			const token = resp.data.data.access_token
			console.log('–ü–æ–ª—É—á–µ–Ω JWT —Ç–æ–∫–µ–Ω Billz:', token)
			return token
		} else {
			console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Billz:', resp.status, resp.data)
			return null
		}
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ auth Billz:', err)
		return null
	}
}

let cachedProducts = null
let cacheTimestamp = null
const CACHE_DURATION = 5 * 60 * 1000

async function getAllProducts(jwt) {
	const now = Date.now()
	if (
		cachedProducts &&
		cacheTimestamp &&
		now - cacheTimestamp < CACHE_DURATION
	) {
		console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (Billz).')
		return cachedProducts
	}
	try {
		let all = []
		let page = 1
		const limit = 100
		while (true) {
			const r = await axios.get(process.env.BILLZ_PRODUCTS_URL, {
				headers: {
					Accept: 'application/json',
					Authorization: `Bearer ${jwt}`,
				},
				params: { page, limit },
			})
			if (r.status === 200) {
				const { products } = r.data
				if (!products || products.length === 0) break
				const filtered = products
					.filter(
						p =>
							p.shop_measurement_values &&
							p.shop_measurement_values.some(
								sm => sm.shop_id === process.env.DESIRED_SHOP_ID
							)
					)
					.map(p => {
						const shopM = p.shop_measurement_values.find(
							sm => sm.shop_id === process.env.DESIRED_SHOP_ID
						)
						const priceObj = p.shop_prices.find(
							pr =>
								pr.shop_id === process.env.DESIRED_SHOP_ID &&
								pr.retail_currency === 'UZS'
						)
						const price = priceObj ? priceObj.retail_price : 0
						return {
							id: p.id,
							sku: p.sku || '',
							name: p.name || (shopM ? shopM.name : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
							brand_name: p.brand_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥',
							price,
							qty: shopM ? shopM.active_measurement_value : 0,
							shop_name: shopM ? shopM.shop_name : 'Unknown Shop',
							main_image_url_full: p.main_image_url_full || '',
							photos: p.photos ? p.photos.map(ph => ph.photo_url) : [],
							categories: p.categories || [],
						}
					})
				all = [...all, ...filtered]
				console.log(`Billz page=${page}, —Ç–æ–≤–∞—Ä–æ–≤: ${filtered.length}`)
				page++
			} else {
				console.error('–û—à–∏–±–∫–∞ Billz get products:', r.status, r.data)
				break
			}
		}
		console.log(`–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ Billz: ${all.length}`)
		cachedProducts = all
		cacheTimestamp = now
		return all
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ getAllProducts Billz:', err)
		return []
	}
}

app.get('/api/products', async (req, res) => {
	console.log('GET /api/products, cat=', req.query.category)
	const jwt = await getJwtToken()
	if (!jwt) return res.status(500).json({ error: 'Billz auth error' })
	const products = await getAllProducts(jwt)
	const cat = req.query.category
	if (cat && cat !== '–í—Å–µ' && cat !== 'Hammasi') {
		const filtered = products.filter(p =>
			p.categories.some(c => c.name === cat)
		)
		return res.json(filtered)
	}
	return res.json(products)
})

app.get('/api/categories', async (req, res) => {
	console.log('GET /api/categories')
	const jwt = await getJwtToken()
	if (!jwt) return res.status(500).json({ error: 'Billz auth error' })
	const products = await getAllProducts(jwt)
	const catSet = new Set()
	products.forEach(p => p.categories.forEach(ct => catSet.add(ct.name)))
	let cats = Array.from(catSet).sort()
	if (!cats.includes('Hammasi')) cats.unshift('Hammasi')
	if (!cats.includes('–í—Å–µ')) cats.unshift('–í—Å–µ')
	res.json(cats)
})

// ***********************
// 2) –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å –∏ –º–µ–Ω—é –±–æ—Ç–∞
// ***********************
const translations = {
	ru: {
		select_language: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
		start: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? üòä',
		ask_contact:
			'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {{name}}! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.',
		contact_saved:
			'–°–ø–∞—Å–∏–±–æ, {{name}}! –í–∞—à –Ω–æ–º–µ—Ä {{phone}} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ "üìö –ö–∞—Ç–∞–ª–æ–≥", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.',
		contact_error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.',
		please_enter_name: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è. ‚úçÔ∏è',
		catalog: 'üìö –öa—Ç–∞–ª–æ–≥',
		cart: 'üõí –ö–æ—Ä–∑–∏–Ω–∞',
		orders: 'üì¶ –ó–∞–∫–∞–∑—ã',
		my_data: 'üìù –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ',
		open_catalog: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
		cart_empty: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.',
		orders_unavailable: '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.',
		added_to_cart: '‚úÖ –¢–æ–≤–∞—Ä {{name}} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.',
		invalid_data: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
		language_changed: '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω.',
		my_cart: 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞',
		total: 'üí∞ –ò—Ç–æ–≥–æ',
		checkout: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
		order_success: 'üéâ –í–∞—à –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!',
		order_canceled: '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.',
		order_created:
			'üì¶ –ó–∞–∫–∞–∑ ‚Ññ{{merchant_trans_id}}\nüí∞ –°—É–º–º–∞: {{amount}} UZS\nüîó –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{{url}}',
		order_error: '‚ùå –û—à–∏–±–∫–∞: {{error}}',
		payment_request: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Å—Å—ã–ª–∫–µ:',
		order_empty: '–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.',
		switch_language: '–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
		welcome:
			'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {{name}}! üëã\n–ß–µ–º –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
		my_data_text: '–í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {{name}}\n–¢–µ–ª–µ—Ñ–æ–Ω: {{phone}}',
		change_name: '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è',
		change_phone: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä',
		clear_orders: '–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã',
		back: '–ù–∞–∑–∞–¥',
	},
	uz: {
		select_language: 'Tilni tanlang:',
		start: 'Salom! Ismingiz nima? üòä',
		ask_contact:
			'Siz bilan tanishganimdan xursandman, {{name}}! Iltimos, kontakt raqamingizni yuboring.',
		contact_saved:
			'Rahmat, {{name}}! Sizning raqamingiz {{phone}} saqlandi. "üìö Katalog" tugmasini bosing.',
		contact_error: 'Iltimos, kontakt yuboring.',
		please_enter_name: 'Iltimos, ismingizni kiriting. ‚úçÔ∏è',
		catalog: 'üìö Katalog',
		cart: 'üõí Savat',
		orders: 'üì¶ Buyurtmalar',
		my_data: 'üìù Mening ma‚Äôlumotlarim',
		open_catalog: 'Katalogni ochish',
		cart_empty: "Savat bo'sh.",
		orders_unavailable: "Buyurtmangiz hali yo'q.",
		added_to_cart: "‚úÖ Mahsulot {{name}} savatga qo'shildi.",
		invalid_data: "‚ùå Noto'g'ri ma'lumotlar.",
		language_changed: "Til o'zgartirildi.",
		my_cart: 'üõí Mening savatim',
		total: 'üí∞ Jami',
		checkout: 'Buyurtma berish',
		order_success: "üéâ Buyurtmangiz to'landi!",
		order_canceled: '‚ùå Buyurtma bekor qilindi.',
		order_created:
			"üì¶ Buyurtma ‚Ññ{{merchant_trans_id}}\nüí∞ Jami: {{amount}} UZS\nüîó Iltimos, to'lang:\n{{url}}",
		order_error: '‚ùå Xato: {{error}}',
		payment_request: "Iltimos, quyidagi havola orqali to'lang:",
		order_empty: "Buyurtmalar yo'q.",
		switch_language: "Tilni o'zgartirish",
		welcome:
			"Xush kelibsiz, {{name}}! üëã\nSizga qanday yordam bera olamiz? Kerakli bo'limni tanlang:",
		my_data_text:
			"Sizning ma'lumotlaringiz:\nIsm: {{name}}\nTelefon: {{phone}}",
		change_name: "Ismni o'zgartirish",
		change_phone: "Telefon raqamini o'zgartirish",
		clear_orders: 'Buyurtmalarni tozalash',
		back: 'Orqaga',
	},
}

function sendMainMenu(ctx) {
	const lang = ctx.session.language || 'ru'
	ctx.session.state = 'MENU'
	const welcomeMsg = translations[lang].welcome.replace(
		'{{name}}',
		ctx.session.name
	)
	ctx.reply(
		welcomeMsg,
		Markup.keyboard([
			[translations[lang].catalog, translations[lang].cart],
			[translations[lang].orders, translations[lang].my_data],
			[`üîÑ ${translations[lang].switch_language}`],
		]).resize()
	)
}

function sendMyData(ctx) {
	const lang = ctx.session.language || 'ru'
	ctx.session.state = 'MY_DATA'
	const dataMsg = translations[lang].my_data_text
		.replace('{{name}}', ctx.session.name || '‚Äî')
		.replace('{{phone}}', ctx.session.contact || '‚Äî')
	ctx.reply(
		dataMsg,
		Markup.inlineKeyboard([
			[Markup.button.callback(translations[lang].change_name, 'edit_name')],
			[Markup.button.callback(translations[lang].change_phone, 'edit_phone')],
			[Markup.button.callback(translations[lang].clear_orders, 'clear_orders')],
			[Markup.button.callback(translations[lang].back, 'back_to_menu')],
		])
	)
}

// ***********************
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤ –±–∞–∑–µ
// ***********************
bot.start(async ctx => {
	try {
		const user = await getUser(ctx.from.id)
		if (user) {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Å—Å–∏–µ–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
			ctx.session.name = user.name
			ctx.session.contact = user.phone
			ctx.session.language = user.language
			sendMainMenu(ctx)
		} else {
			// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
			ctx.session = {}
			ctx.session.state = 'SELECT_LANGUAGE'
			ctx.session.cart = []
			await ctx.reply(
				translations.ru.select_language,
				Markup.inlineKeyboard([
					Markup.button.callback('–†—É—Å—Å–∫–∏–π üá∑üá∫', 'lang_ru'),
					Markup.button.callback("O'zbek üá∫üáø", 'lang_uz'),
				])
			)
		}
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', err)
		ctx.session = {}
		ctx.session.state = 'SELECT_LANGUAGE'
		ctx.session.cart = []
		await ctx.reply(
			translations.ru.select_language,
			Markup.inlineKeyboard([
				Markup.button.callback('–†—É—Å—Å–∫–∏–π üá∑üá∫', 'lang_ru'),
				Markup.button.callback("O'zbek üá∫üáø", 'lang_uz'),
			])
		)
	}
})

bot.action(/lang_(ru|uz)/, async ctx => {
	try {
		await ctx.answerCbQuery()
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:', error)
	}
	const selectedLang = ctx.match[1]
	if (['ru', 'uz'].includes(selectedLang)) {
		ctx.session.language = selectedLang
		if (ctx.session.name) {
			sendMainMenu(ctx)
		} else {
			ctx.session.state = 'INPUT_NAME'
			await ctx.reply(translations[selectedLang].start)
			await ctx.reply(translations[selectedLang].please_enter_name)
		}
	} else {
		await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞.')
	}
})

bot.action('edit_name', async ctx => {
	ctx.session.state = 'EDIT_NAME'
	await ctx.answerCbQuery()
	await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
})
bot.action('edit_phone', async ctx => {
	ctx.session.state = 'EDIT_PHONE'
	await ctx.answerCbQuery()
	await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
})
bot.action('clear_orders', async ctx => {
	const chat_id = ctx.from.id
	const query = `DELETE FROM orders WHERE chat_id = $1`
	try {
		await pool.query(query, [chat_id])
		await ctx.answerCbQuery('–ó–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã.')
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', err)
		await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤.')
	}
})
bot.action('back_to_menu', async ctx => {
	await ctx.answerCbQuery()
	sendMainMenu(ctx)
})

bot.on('text', async ctx => {
	if (ctx.session.state === 'INPUT_NAME') {
		const name = ctx.message.text.trim()
		if (name) {
			ctx.session.name = name
			ctx.session.state = 'AWAIT_CONTACT'
			await ctx.reply(
				translations[ctx.session.language].ask_contact.replace(
					'{{name}}',
					name
				),
				Markup.keyboard([
					Markup.button.contactRequest('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'),
				]).resize()
			)
		} else {
			await ctx.reply(translations[ctx.session.language].please_enter_name)
		}
	} else if (ctx.session.state === 'EDIT_NAME') {
		const newName = ctx.message.text.trim()
		if (newName) {
			ctx.session.name = newName
			await ctx.reply(`–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${newName}.`)
			sendMyData(ctx)
		} else {
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.')
		}
	} else if (ctx.session.state === 'EDIT_PHONE') {
		const newPhone = ctx.message.text.trim()
		if (newPhone) {
			ctx.session.contact = newPhone
			await ctx.reply(`–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${newPhone}.`)
			sendMyData(ctx)
		} else {
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.')
		}
	} else if (ctx.session.state === 'MENU') {
		const msg = ctx.message.text
		const lang = ctx.session.language || 'ru'
		if (msg === translations[lang].catalog) {
			const webAppUrl = `${process.env.WEBAPP_URL}?lang=${lang}&chat_id=${
				ctx.from.id
			}&phone=${ctx.session.contact || ''}`
			await ctx.reply(
				translations[lang].open_catalog,
				Markup.inlineKeyboard([
					[Markup.button.webApp(translations[lang].open_catalog, webAppUrl)],
				])
			)
		} else if (msg === translations[lang].cart) {
			try {
				const resp = await axios.get(`${process.env.WEBAPP_URL}/get-car`, {
					params: { chat_id: ctx.from.id },
				})
				const userCart = resp.data.cart
				if (userCart && userCart.length > 0) {
					let txt =
						lang === 'ru'
							? 'üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n'
							: 'üõí <b>Mening savatim:</b>\n\n'
					userCart.forEach((item, i) => {
						txt += `üìå <b>${i + 1}. ${item.name}</b>\n–ö–æ–ª-–≤–æ: ${
							item.quantity
						}\n–¶–µ–Ω–∞: ${item.price} UZS\n-----------------\n`
					})
					await ctx.replyWithHTML(txt)
				} else {
					await ctx.reply(translations[lang].cart_empty)
				}
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', err)
				await ctx.reply(translations[lang].cart_empty)
			}
		} else if (msg === translations[lang].orders) {
			const query = `SELECT * FROM orders WHERE chat_id = $1`
			try {
				const result = await pool.query(query, [ctx.from.id])
				const rows = result.rows
				if (rows.length > 0) {
					let txt =
						lang === 'ru'
							? 'üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n'
							: 'üì¶ <b>Mening buyurtmalarim:</b>\n\n'
					rows.forEach(ord => {
						let statusText = ''
						switch (ord.status) {
							case 'CREATED':
								statusText = '–í –æ—á–µ—Ä–µ–¥–∏'
								break
							case 'PAID':
								statusText = '–û–ø–ª–∞—á–µ–Ω'
								break
							case 'CANCELED':
								statusText = '–û—Ç–º–µ–Ω—ë–Ω'
								break
							default:
								statusText = ord.status
						}
						txt += `‚úÖ <b>–ó–∞–∫–∞–∑ ‚Ññ${ord.merchant_trans_id}</b>\nüí∞ –°—É–º–º–∞: ${ord.totalamount} UZS\nüìå –°—Ç–∞—Ç—É—Å: ${statusText}\nüõçÔ∏è –¢–æ–≤–∞—Ä—ã:\n`
						const cartItems = ord.cart
						cartItems.forEach((item, idx) => {
							txt += `   ${idx + 1}. ${item.name} x ${item.quantity} —à—Ç. - ${
								item.price * item.quantity
							} UZS\n`
						})
						txt += `\n-----------------------\n`
					})
					const messages = txt.match(/[\s\S]{1,4000}/g)
					messages.forEach(async m => await ctx.replyWithHTML(m))
				} else {
					ctx.reply(translations[lang].order_empty)
				}
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î:', err)
				ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.')
			}
		} else if (msg.toLowerCase().includes('–º–æ–∏ –¥–∞–Ω–Ω—ã–µ')) {
			sendMyData(ctx)
		} else if (msg.startsWith('üîÑ')) {
			const newLang = lang === 'ru' ? 'uz' : 'ru'
			ctx.session.language = newLang
			await ctx.reply(
				`–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${newLang === 'ru' ? '–†—É—Å—Å–∫–∏–π' : "O'zbek"}.`
			)
			sendMainMenu(ctx)
		} else {
			await ctx.reply(
				lang === 'uz'
					? "Noma'lum buyruq. Iltimos, tugmalarni ishlating."
					: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.'
			)
		}
	}
})

bot.on('contact', async ctx => {
	if (ctx.session.state !== 'AWAIT_CONTACT') return
	const contact = ctx.message.contact
	if (contact && contact.phone_number) {
		ctx.session.contact = contact.phone_number
		ctx.session.state = 'MENU'
		const query = `
      INSERT INTO users (chat_id, name, phone, language, last_activity)
      VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
      ON CONFLICT (chat_id)
      DO UPDATE SET name = EXCLUDED.name, phone = EXCLUDED.phone, language = EXCLUDED.language, last_activity = CURRENT_TIMESTAMP
    `
		try {
			await pool.query(query, [
				ctx.from.id,
				ctx.session.name,
				contact.phone_number,
				ctx.session.language || 'ru',
			])
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', err)
		}
		sendMainMenu(ctx)
	} else {
		await ctx.reply(translations[ctx.session.language].contact_error)
	}
})

bot.on('web_app_data', async ctx => {
	const lang = ctx.session.language || 'ru'
	try {
		const d = JSON.parse(ctx.message.web_app_data.data)
		if (d.action === 'updateCart' && Array.isArray(d.cart)) {
			ctx.session.cart = d.cart
			await ctx.reply(
				lang === 'ru' ? 'üìù –ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.' : 'üìù Savat yangilandi.'
			)
		} else if (d.action === 'add' && d.product) {
			if (!ctx.session.cart) ctx.session.cart = []
			const existing = ctx.session.cart.find(it => it.id === d.product.id)
			const qty = d.quantity || 1
			if (existing) {
				existing.quantity += qty
			} else {
				ctx.session.cart.push({
					id: d.product.id,
					sku: d.product.sku,
					name: d.product.name,
					price: d.product.price,
					quantity: qty,
					qty: d.product.qty,
				})
			}
			await ctx.reply(
				lang === 'ru'
					? `‚úÖ –¢–æ–≤–∞—Ä "${d.product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.`
					: `‚úÖ Mahsulot "${d.product.name}" savatga qo'shildi.`
			)
		} else if (d.action === 'remove' && d.product) {
			if (ctx.session.cart) {
				const index = ctx.session.cart.findIndex(it => it.id === d.product.id)
				if (index !== -1) {
					ctx.session.cart.splice(index, 1)
					await ctx.reply(
						lang === 'ru'
							? `‚ùå –¢–æ–≤–∞—Ä "${d.product.name}" —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.`
							: `‚ùå Mahsulot "${d.product.name}" savatdan olib tashlandi.`
					)
				}
			}
		} else {
			await ctx.reply(translations[lang].invalid_data)
		}
	} catch (e) {
		console.error('–û—à–∏–±–∫–∞ web_app_data:', e)
		await ctx.reply(
			lang === 'ru'
				? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.'
				: "Ma'lumotlarni qayta ishlashda xatolik yuz berdi."
		)
	}
})

bot.command('language', async ctx => {
	ctx.session.state = 'SELECT_LANGUAGE'
	await ctx.reply(
		translations[ctx.session.language || 'ru'].select_language,
		Markup.inlineKeyboard([
			Markup.button.callback('–†—É—Å—Å–∫–∏–π üá∑üá∫', 'lang_ru'),
			Markup.button.callback("O'zbek üá∫üáø", 'lang_uz'),
		])
	)
})

bot.on('message', async ctx => {
	console.log(`Unhandled message from user ${ctx.from.id}:`, ctx.message.text)
})

// ***********************
// CLICK-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ WooCommerce
// ***********************
app.post('/create-click-order', async (req, res) => {
	console.log('üì® POST /create-click-order, body=', req.body)
	const { chat_id, cart, phone_number, lang } = req.body
	if (
		!chat_id ||
		!cart ||
		!Array.isArray(cart) ||
		cart.length === 0 ||
		!phone_number
	) {
		return res
			.status(400)
			.json({ success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
	}
	const clientName = req.body.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
	let lineItems = []
	let totalAmount = 0
	for (const item of cart) {
		if (!item.sku) {
			console.warn(`[Click] –¢–æ–≤–∞—Ä –±–µ–∑ SKU: ${item.name}`)
			continue
		}
		const wooProd = await findWooProductBySku(item.sku)
		if (!wooProd) continue
		lineItems.push({
			product_id: wooProd.id,
			quantity: item.quantity,
		})
		totalAmount += item.price * item.quantity
	}
	if (lineItems.length === 0) {
		return res
			.status(400)
			.json({ success: false, error: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Click –∑–∞–∫–∞–∑–∞' })
	}
	console.log(`[Click] totalAmount (UZS)=${totalAmount}`)
	const orderData = {
		payment_method: 'clickuz',
		payment_method_title: 'CLICK',
		set_paid: false,
		billing: {
			first_name: clientName,
			last_name: ' ',
			email: 'client@example.com',
			phone: phone_number,
			address_1: '–ê–¥—Ä–µ—Å',
			address_2: '',
			city: 'Tashkent',
			state: 'Tashkent',
			postcode: '100000',
			country: 'UZ',
		},
		line_items: lineItems,
	}
	try {
		const wcResp = await axios.post(
			`${process.env.WC_API_URL}/orders`,
			orderData,
			{
				auth: {
					username: process.env.WC_CONSUMER_KEY,
					password: process.env.WC_CONSUMER_SECRET,
				},
			}
		)
		const wcOrder = wcResp.data
		const order_id = wcOrder.id
		const order_key = wcOrder.order_key
		const wcTotal = parseFloat(wcOrder.total || '0')
		console.log(
			`[Click] WooCommerce –∑–∞–∫–∞–∑ #${order_id}, order_key=${order_key}, total=${wcTotal}`
		)
		const siteUrl = process.env.WC_SITE_URL || 'https://mrclub.uz'
		const payUrl = `${siteUrl}/checkout/order-pay/${order_id}/?key=${order_key}&order_pay=${order_id}`
		const merchant_trans_id = `click_${Date.now()}`
		const insertQuery = `
      INSERT INTO orders (merchant_trans_id, chat_id, totalAmount, status, lang, cart, wc_order_id, wc_order_key)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
    `
		try {
			await pool.query(insertQuery, [
				merchant_trans_id,
				chat_id,
				totalAmount,
				'CREATED',
				lang || 'ru',
				JSON.stringify(cart),
				order_id,
				order_key,
			])
			const txt = translations[lang || 'ru'].order_created
				.replace('{{merchant_trans_id}}', merchant_trans_id)
				.replace('{{amount}}', totalAmount)
				.replace('{{url}}', payUrl)
			bot.telegram
				.sendMessage(chat_id, txt)
				.catch(e => console.error('–û—à–∏–±–∫–∞ Telegram (Click):', e))
			return res.json({ success: true, clickLink: payUrl })
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î:', err)
			return res.status(500).json({
				success: false,
				error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ WooCommerce',
			})
		}
	} catch (e) {
		console.error(
			'[Click] –û—à–∏–±–∫–∞ WooCommerce (create order):',
			e.response?.data || e.message
		)
		return res
			.status(500)
			.json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ WooCommerce' })
	}
})

// ***********************
// Payme-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ WooCommerce
// ***********************
async function findWooProductBySku(sku) {
	console.log('[Payme] findWooProductBySku:', sku)
	try {
		const url = `${process.env.WC_API_URL}/products`
		const resp = await axios.get(url, {
			auth: {
				username: process.env.WC_CONSUMER_KEY,
				password: process.env.WC_CONSUMER_SECRET,
			},
			params: { sku },
		})
		if (Array.isArray(resp.data) && resp.data.length > 0) {
			console.log('[Payme] –¢–æ–≤–∞—Ä –ø–æ SKU –Ω–∞–π–¥–µ–Ω:', resp.data[0].name)
			return resp.data[0]
		}
		console.warn('[Payme] SKU –Ω–µ –Ω–∞–π–¥–µ–Ω:', sku)
		return null
	} catch (e) {
		console.error('[Payme] –û—à–∏–±–∫–∞ findWooProductBySku:', e)
		return null
	}
}

app.post('/create-payme-order', async (req, res) => {
	console.log('üì® POST /create-payme-order, body=', req.body)
	const { chat_id, cart, phone_number, lang } = req.body
	if (
		!chat_id ||
		!cart ||
		!Array.isArray(cart) ||
		cart.length === 0 ||
		!phone_number
	) {
		return res
			.status(400)
			.json({ success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
	}
	let lineItems = []
	let totalAmount = 0
	for (const item of cart) {
		if (!item.sku) {
			console.warn(`[Payme] –¢–æ–≤–∞—Ä –±–µ–∑ SKU: ${item.name}`)
			continue
		}
		const wooProd = await findWooProductBySku(item.sku)
		if (!wooProd) continue
		lineItems.push({
			product_id: wooProd.id,
			quantity: item.quantity,
		})
		totalAmount += item.price * item.quantity
	}
	if (lineItems.length === 0) {
		return res
			.status(400)
			.json({ success: false, error: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Payme –∑–∞–∫–∞–∑–∞' })
	}
	console.log(`[Payme] totalAmount (UZS)=${totalAmount}`)
	const orderData = {
		payment_method: 'payme',
		payment_method_title: 'Payme',
		set_paid: false,
		billing: {
			first_name: '–¢–µ—Å—Ç',
			last_name: '–ö–ª–∏–µ–Ω—Ç',
			address_1: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
			city: 'Tashkent',
			state: 'Tashkent',
			postcode: '100000',
			country: 'UZ',
			email: 'test@example.com',
			phone: phone_number,
		},
		line_items: lineItems,
	}
	try {
		const wcResp = await axios.post(
			`${process.env.WC_API_URL}/orders`,
			orderData,
			{
				auth: {
					username: process.env.WC_CONSUMER_KEY,
					password: process.env.WC_CONSUMER_SECRET,
				},
			}
		)
		const wcOrder = wcResp.data
		const order_id = wcOrder.id
		const order_key = wcOrder.order_key
		const wcTotal = parseFloat(wcOrder.total || '0')
		console.log(
			`[Payme] WooCommerce –∑–∞–∫–∞–∑ #${order_id}, order_key=${order_key}, total=${wcTotal}`
		)
		const siteUrl = process.env.WC_SITE_URL || 'https://mrclub.uz'
		const payUrl = `${siteUrl}/checkout/order-pay/${order_id}/?key=${order_key}&order_pay=${order_id}`
		const merchant_trans_id = `payme_${Date.now()}`
		const insertQuery = `
      INSERT INTO orders (merchant_trans_id, chat_id, totalAmount, status, lang, cart, wc_order_id, wc_order_key)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
    `
		try {
			await pool.query(insertQuery, [
				merchant_trans_id,
				chat_id,
				totalAmount,
				'CREATED',
				lang || 'ru',
				JSON.stringify(cart),
				order_id,
				order_key,
			])
			const textMsg = `–ó–∞–∫–∞–∑ ‚Ññ${merchant_trans_id}\n–°—É–º–º–∞: ${wcTotal} UZS\n–û–ø–ª–∞—Ç–∏—Ç—å:\n${payUrl}`
			bot.telegram
				.sendMessage(chat_id, textMsg)
				.catch(e =>
					console.error('–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Payme —Å—Å—ã–ª–∫–∏:', e)
				)
			return res.json({ success: true, paymeLink: payUrl })
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ Payme –≤ –ë–î:', err)
			return res.status(500).json({
				success: false,
				error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ WooCommerce',
			})
		}
	} catch (e) {
		console.error(
			'[Payme] –û—à–∏–±–∫–∞ WooCommerce (create order):',
			e.response?.data || e.message
		)
		return res
			.status(500)
			.json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ WooCommerce' })
	}
})

// ***********************
// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –∑–∞–∫–∞–∑–∞–º–∏
// ***********************
app.post('/save-cart', async (req, res) => {
	const { chat_id, cart } = req.body
	if (!chat_id || !cart) {
		return res
			.status(400)
			.json({ success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
	}
	const cartJSON = JSON.stringify(cart)
	const query = `INSERT INTO carts (chat_id, cart)
                 VALUES ($1, $2)
                 ON CONFLICT (chat_id) DO UPDATE SET cart = EXCLUDED.cart`
	try {
		await pool.query(query, [chat_id, cartJSON])
		return res.json({ success: true })
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ –ë–î:', err)
		return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
})

app.get('/get-car', async (req, res) => {
	const chat_id = req.query.chat_id
	if (!chat_id) {
		return res.status(400).json({ success: false, error: 'chat_id –Ω–µ —É–∫–∞–∑–∞–Ω' })
	}
	const query = `SELECT cart FROM carts WHERE chat_id = $1`
	try {
		const result = await pool.query(query, [chat_id])
		if (result.rows.length) {
			const row = result.rows[0]
			return res.json({ success: true, cart: row.cart })
		} else {
			return res.json({ success: true, cart: [] })
		}
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ –ë–î:', err)
		return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
})

app.get('/get-orders', async (req, res) => {
	const chat_id = req.query.chat_id
	if (!chat_id) {
		return res.status(400).json({ success: false, error: 'chat_id –Ω–µ —É–∫–∞–∑–∞–Ω' })
	}
	const query = `SELECT * FROM orders WHERE chat_id = $1`
	try {
		const result = await pool.query(query, [chat_id])
		const ordersWithStatus = result.rows.map(o => {
			let statusText = ''
			switch (o.status) {
				case 'CREATED':
					statusText = '–í –æ—á–µ—Ä–µ–¥–∏'
					break
				case 'PAID':
					statusText = '–û–ø–ª–∞—á–µ–Ω'
					break
				case 'CANCELED':
					statusText = '–û—Ç–º–µ–Ω—ë–Ω'
					break
				default:
					statusText = o.status
			}
			return { ...o, statusText }
		})
		return res.json({ success: true, orders: ordersWithStatus })
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î:', err)
		return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
})

app.post('/clear-orders', async (req, res) => {
	const { chat_id } = req.body
	if (!chat_id) {
		return res.status(400).json({ success: false, error: 'chat_id –Ω–µ —É–∫–∞–∑–∞–Ω' })
	}
	const query = `DELETE FROM orders WHERE chat_id = $1`
	try {
		await pool.query(query, [chat_id])
		return res.json({ success: true, message: `–ó–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã.` })
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', err)
		return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
})

// ***********************
// Self-ping (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ Render.com)
// ***********************
if (process.env.RENDER_EXTERNAL_URL) {
	cron.schedule('*/10 * * * *', async () => {
		try {
			await axios.get(process.env.RENDER_EXTERNAL_URL)
			console.log('Self-ping: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.')
		} catch (error) {
			console.error('Self-ping: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message)
		}
	})
}

// ***********************
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
// ***********************
app.listen(PORT, () => {
	console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
})

bot
	.launch()
	.then(() => console.log('Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
	.catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞:', err))

process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
